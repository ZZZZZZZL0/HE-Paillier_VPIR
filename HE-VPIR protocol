// this protocol works in Magma. an algebraic computation software



function SH6(num)					// input: an integer

V2:=VectorSpace(GF(2),32);
			//8个hash初值
h0 := 0x6a09e667;	     h0:=V2!(Reverse(Intseq(h0,2,32)));	//保证高位在左
h1 := 0xbb67ae85;       h1:=V2!(Reverse(Intseq(h1,2,32)));
h2 := 0x3c6ef372;        h2:=V2!(Reverse(Intseq(h2,2,32)));
h3 := 0xa54ff53a;         h3:=V2!(Reverse(Intseq(h3,2,32)));
h4 := 0x510e527f;        h4:=V2!(Reverse(Intseq(h4,2,32)));
h5 := 0x9b05688c;       h5:=V2!(Reverse(Intseq(h5,2,32)));
h6 := 0x1f83d9ab;       h6:=V2!(Reverse(Intseq(h6,2,32)));
h7 := 0x5be0cd19;       h7:=V2!(Reverse(Intseq(h7,2,32)));
			//64个hash常量
kt:=[
   0x428a2f98,    0x71374491,   0xb5c0fbcf,    0xe9b5dba5,   0x3956c25b,   0x59f111f1,     0x923f82a4,    0xab1c5ed5,
   0xd807aa98,   0x12835b01,   0x243185be,  0x550c7dc3,    0x72be5d74,   0x80deb1fe,    0x9bdc06a7,   0xc19bf174,
   0xe49b69c1,   0xefbe4786,    0x0fc19dc6,    0x240ca1cc,    0x2de92c6f,    0x4a7484aa,    0x5cb0a9dc,    0x76f988da,
   0x983e5152,   0xa831c66d,   0xb00327c8,   0xbf597fc7,     0xc6e00bf3,    0xd5a79147,   0x06ca6351,    0x14292967,
   0x27b70a85,   0x2e1b2138,   0x4d2c6dfc,    0x53380d13,   0x650a7354,   0x766a0abb,   0x81c2c92e,    0x92722c85,
   0xa2bfe8a1,    0xa81a664b,   0xc24b8b70,   0xc76c51a3,    0xd192e819,   0xd6990624,   0xf40e3585,    0x106aa070,
   0x19a4c116,   0x1e376c08,    0x2748774c,   0x34b0bcb5,   0x391c0cb3,   0x4ed8aa4a,    0x5b9cca4f,     0x682e6ff3,
   0x748f82ee,    0x78a5636f,    0x84c87814,   0x8cc70208,    0x90befffa,     0xa4506ceb,    0xbef9a3f7,      0xc67178f2 ];
//_________________________________________________________________
v2i:=function(x)			             //域向量转整数
        //   v:=Eltseq(x);
v:=[0: i in [1..Degree(x)]];
for i in [1..#v] do
	if x[i] eq 1 then
		v[i]:=1;
	end if;
end for;
           return Seqint(Reverse(v),2);   //magma中高低位与二进制相反
end function;
//_________________________________________________________________
i2v:=function(n)			             //整数转域向量
           return V2!( Reverse(Intseq(n mod 2^32,2,32)) );
end function;
//_________________________________________________________________
sigma0:=function(x)
           v1:=Rotate(x,7);     v2:=Rotate(x,18);       //循环右移
           v3:=Rotate(x,3);   	for i in [1..3] do   //右移
			      v3[i]:=0;
			end for;
           return v1+v2+v3;
end function;
//_________________________________________________________________
sigma1:=function(x)
           v1:=Rotate(x,17);     v2:=Rotate(x,19);       //循环右移
           v3:=Rotate(x,10);   	for i in [1..10] do   //右移
			      v3[i]:=0;
			end for;
           return v1+v2+v3;
end function;
//_________________________________________________________________
Sigma0:=function(x)
           v1:=Rotate(x,2);     v2:=Rotate(x,13);     v3:=Rotate(x,22);
           return v1+v2+v3;
end function;
//_________________________________________________________________
Sigma1:=function(x)
           v1:=Rotate(x,6);     v2:=Rotate(x,11);     v3:=Rotate(x,25);
           return v1+v2+v3;
end function;
//_________________________________________________________________
Ch:=function(x,y,z)   			       //choice
v1:=x;	v2:=x;
for i in [1..Degree(x)] do
	if x[i] eq 1 and y[i] eq 1 then 	//按位与
		v1[i]:=1;
	else
		v1[i]:=0;
	end if;

	if x[i] eq 0 and z[i] eq 1 then
		v2[i]:=1;
	else
		v2[i]:=0;
	end if;
end for;
	return v1+v2;
end function;
//_________________________________________________________________
Ma:=function(x,y,z)   			    //majority
v1:=x;	v2:=x;	v3:=x;
for i in [1..Degree(x)] do
	if x[i] eq 1 and y[i] eq 1 then	//按位与
		v1[i]:=1;
	else
		v1[i]:=0;
	end if;

	if x[i] eq 1 and z[i] eq 1 then	//按位与
		v2[i]:=1;
	else
		v2[i]:=0;
	end if;

	if y[i] eq 1 and z[i] eq 1 then	//按位与
		v3[i]:=1;
	else
		v3[i]:=0;
	end if;
end for;
	return v1+v2+v3;
end function;
//__________________________________________________________________________________
					       //INPUT
ipnm:=Reverse(Intseq(num,2));
lenim:=#ipnm;   		   
			// 附加填充比特  至448位
//__________________________________________________________________________________
ipnm[#ipnm+1]:=1;   
padd:=512-64-(lenim mod 512)-1;
ipnm:=ipnm cat [0: i in[1..padd]];
			//附加长度值
temp:=Reverse(Intseq(lenim,2,64));  
ipnm:=ipnm cat temp;      
//__________________________________________________________________________________
			//构造64个word，每一个32bit
wt:=[];
for i := 1 to 16 by 1 do 
	wt[i]:=V2!(ipnm[32*(i-1)+1..32*i]);
end for;
//__________________________________________________________________________________
for i := 17 to 64 by 1 do 
            tempwt:=v2i(sigma1(wt[i-2]))+v2i(wt[i-7])+v2i(sigma0(wt[i-15]))+v2i(wt[i-16]);
            wt[i]:=i2v(tempwt);
end for;    		//已得到64个word: #wt=64
//__________________________________________________________________________________
					          //循环
a:=h0;   b:=h1;   c:=h2;   d:=h3;   
e:=h4;   f:=h5;    g:=h6;   h:=h7; 
for i in [1..64] do
        tp1:=v2i(h)+v2i(Sigma1(e))+v2i(Ch(e,f,g))+v2i( V2!(Reverse(Intseq(kt[i],2,32))) )+v2i(wt[i]);
        tp2:=v2i(Sigma0(a))+v2i(Ma(a,b,c));	        //big integers
        h:=g;    g:=f;   f:=e;    
	tpe:=v2i(d)+tp1;     e:=i2v(tpe);   
        d:=c;    c:=b;   b:=a;   
	tpa:=tp1+tp2;   	a:=i2v(tpa);  
end for;

hout:=[];
hout[1]:=(v2i(h0)+v2i(a)) mod 2^32;   hout[2]:=(v2i(h1)+v2i(b)) mod 2^32;   
hout[3]:=(v2i(h2)+v2i(c)) mod 2^32;   hout[4]:=(v2i(h3)+v2i(d)) mod 2^32;
hout[5]:=(v2i(h4)+v2i(e)) mod 2^32;   hout[6]:=(v2i(h5)+v2i(f))  mod 2^32;
hout[7]:=(v2i(h6)+v2i(g)) mod 2^32;   hout[8]:=(v2i(h7)+v2i(h)) mod 2^32;
//_________________________________________________________________________________
					    //OUTPUT
Enc_num:=[];
for i in [1..#hout] do
    Enc_num:= Enc_num cat Reverse(Intseq(hout[i],2,32));
end for;

return Seqint(Reverse(Enc_num),2);
end function;
//__________________*********************************************_________________








HEPaillier:=function(X, query_index, N, phin, finpow)                       //basic PIR scheme
// _____________________________________________________________________
	//p1:=NextPrime(2^1535);	p2:=NextPrime(p1); 
	//N:=p1*p2;		phin:=(p1-1)*(p2-1);		
g:=N+1;		rec:= [Modinv(phin,N), -1];
//______________________________________________________________________		
ell:=Ceiling(Sqrt(#X));	D:=[ ];
X:=X cat [0: i in [1..ell^2-#X]];
for i:=1 to ell do
      D[i]:=X[ell*(i-1)+1..ell*i];
end for;
//_______________________________Query______________________________  
u:= query_index div ell;	v:= query_index mod ell;
if v eq 0 then
     v:=ell;
else
     u:=u+1;
end if;

quy:=[ ];	j:=0;	r:=[Random(N-1)+1:  i in [1..ell] ];
	t:=Cputime();
for rj in r do
      j:=j+1;      quy[j]:= Modexp(rj,N,N^2); 
end for;
quy[v]:= g*Modexp(r[v],N,N^2) mod N^2;
tq:=Cputime(t);	//rk:=phin;
//_______________________________Answer_____________________________
ans:=[ ];
for s:=1 to ell do
      ans[s]:= 1;
      for i:=1 to ell do
            ans[s]:= ans[s]*Modexp(quy[i],D[s,i], N^2)  mod N^2;
      end for;    
end for;
ta:=Cputime(t)-tq;
//___________________________Reconstruction________________________
temp:= Modexp(ans[u],phin,N^2)-1;	
rec[2]:= (temp div N)*rec[1];	dk:= rec[2] mod N;
tr:=Cputime(t)-ta-tq;	delete t;

filenmq:="query_Paillier" cat IntegerToString(finpow) cat ".txt";      
filenma:="answer_Paillier" cat IntegerToString(finpow) cat ".txt";
PrintFile(filenmq, quy);  		      
PrintFile(filenma, ans);  

return <dk, ta, tr+tq>;
end function;
//__________________*********************************************_________________
		print "finish loading Paillier";  
    



mx:=20;       w:=256;      q:=NextPrime(2^w);       itrivial := 6;   // n<=64;	
m_set:=[4,4,5,6,7,9,11,13,16,20,25,31,38,48,60,75,94,118,148,186,234,294,371];

tpre:=Cputime();
//___________________________________HASH________________________________________
Lay_num:= mx;          		     layer:=Lay_num-1;
HBBG:=[ []: i in[1..Lay_num-1] ];      HBBG[Lay_num]:=[ 2^w-1 : i in [1..2^mx] ];

while layer gt 0 do
       len:= #HBBG[layer+1];
       str1:= IntegerToString( HBBG[layer+1,1] );
	temps6:=SH6(StringToInteger(str1 cat str1));
       	HBBG[layer]:=  [temps6 : i in [1..2^layer]];
       // HBBG[layer]:= [SH6(StringToInteger(str1 cat str1)) : i in [1..2^layer]];
       layer:= layer - 1;
end while;

str1:= IntegerToString(HBBG[1,1]);
RootHBBG:= SH6( StringToInteger(str1 cat str1) );    
delete layer, str1;
//________________________________________________________________________________    
print "HASH consumes", Cputime(tpre);          delete tpre;




					// finish the pre-processing

//________________________________________________________________________________
tprime:=Cputime();
p1:=NextPrime(2^1535);	p2:=NextPrime(p1); 
N:=p1*p2;		phin:=(p1-1)*(p2-1);	
print "find N consumes", Cputime(tprime);          delete tprime;
//________________________________________________________________________________
for npower in [13..mx] do
     printf "__________________the following results are with n=2^%o\n", npower;  

     n:=2^npower;                       
     PrintFile("utime_Paillier.txt", "when n=2^" cat IntegerToString(npower));
     PrintFile("stime_Paillier.txt",  "when n=2^" cat IntegerToString(npower)); 
     PrintFile("ptime_Paillier.txt", "when n=2^" cat IntegerToString(npower)); 

x:=[ 2^w-1 : i in [1..n] ];	query_input:=9; 
			// the user's desired index in [0..n-1]
//______________________________get the merkle tree______________________________
Lay_num:= Ceiling(Log(2,n));         
if Lay_num eq mx then 
      HB:=HBBG;	Root:= RootHBBG;
else 
      HB:=[ []: i in[1..Lay_num-1] ];       
      idst:= mx-Lay_num;	Root:= HBBG[idst,1];
      for i in [1..Lay_num-1] do 
            HB[i]:= HBBG[idst+i][1..2^i];	
      end for;
      HB[Lay_num]:=x;
end if;
//_______________________________________________________________________________

pretm:=Cputime();
//________________________find the authentication path_______________________	
alpha:=[0: indx in [1..Lay_num+1]];      
		// alpha stores these involving indices, starts from 0
alpha[Lay_num+1]:=query_input;        alpha[Lay_num]:= query_input + 1;

if query_input mod 2 eq 1 then 
     alpha[Lay_num]:= query_input - 1;
end if;

for j := Lay_num-1 to 1 by -1 do
     tp:=Floor(alpha[j+1]/2);
     alpha[j]:= tp - 2*(tp mod 2) + 1; 
end for;

utimep:=Cputime(pretm);       delete pretm;    // 40次循环之前的user准备工作
		
//______________________execute the multiserver PIR______________________
	print "begin execute the multiserver PIR";	
ute:=[];	ste:=[];

iteration:= 50;                         	                       // 每个n循环50次
for ite in [1..iteration] do	              
        Res:=[];       			      // 记录PIR的检索结果  
        servertime:=[];        usertime:=[];              // 记录PIR检索时server花费的时间  			

        for itriv in [1..itrivial] do
                Res[itriv]:= HB[itriv,alpha[itriv]+1]; 
        end for;  

        for i in [itrivial+1..Lay_num+1] do
               query_index:=alpha[i]+1;	        // query_index>0
               j:=Min(i,Lay_num);        X:=HB[j];         
               Rep:=HEPaillier(X, query_index, N, phin, npower); 
               Res[i]:=Rep[1];   
               servertime[i-itrivial]:=Rep[2];    usertime[i-itrivial]:=Rep[3];
        end for;   
 

        ct:=Cputime();     
//________________________________Verification__________________________   
        ver:=Res[Lay_num+1];         	 j:=Lay_num;
        while j gt 0 do
                ver:=IntegerToString(ver);
                tempj:=IntegerToString( Res[j] );    	          // MonStgElt
                if IsOdd(alpha[j]) then
                        ver:=SH6(StringToInteger(ver cat tempj) );
                else
                        ver:=SH6(StringToInteger(tempj cat ver) );
                end if;
                j:=j-1;
        end while;

	if ite eq 1 then
        if  ver eq Root  then
                printf "result %o pass the verification\n", Res[#Res];
        else 
                printf "result %o does NOT pass the verification\n", Res[#Res];
        end if; 
	end if;
//____________________________________________________________________
        vertime:=Cputime(ct);      delete ct;

        ste[ite]:= &+servertime;
        ute[ite]:= &+usertime+vertime + utimep;      
  
        PrintFile("stime_Paillier.txt", <"in single iteration, the server consumes:", ste[ite]>);              
        PrintFile("utime_Paillier.txt", <"in single iteration, the user consumes:", ute[ite]>);

end for;   // end for the  50  iterations

        PrintFile("stime_Paillier.txt", <"____the server's average time is:", &+ste/#ste>);  
        PrintFile("utime_Paillier.txt", <"_____the user's average time is:", &+ute/#ute>);

if npower eq mx then
        print "---------------end of the multiserver PIR---------------";
end if;
end for;   // end for npower iterations



